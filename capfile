load 'lib/util.rb'

role :backup, 'theory.kineticode.com'
role :dns,    'crocker.kineticode.com'
role :svn,    'svn.kineticode.com'
role :local,  'localhost'
role :ldap,   'ldap.kineticode.com'
#role :ldap,   '192.168.1.15'
role :mail,   'smtp.kineticode.com'
role :web,    'crocker.kineticode.com'
role :db,     'smtp.kineticode.com'

# For prompt stuff, see http://highline.rubyforge.org/doc/, and call HighLine
# methods on Capistrano::CLI.ui, e.g., Capistrano::CLI.ui.ask().

namespace :apt do
  task :update do
    sudo 'env DEBIAN_FRONTEND=noninteractive apt-get update'
  end
end

namespace :sys do
  # cap sys:adduser -s uname=foo -s name='Foo Bar' -s last=Bar -s first=Foo \
  # -s room=101 -s work=555-1212 -s home=544-2345 -s url=http:/foo.com/ \
  # -s mobile=566-1234 -s fax=232-4233 -s init=FB -s title=President -s sn=Bar
  task :adduser, :roles => :mail do
    
    unless user = self[:uname]
      puts 'You must specify a username via the "-s uname=foo" option'
      puts 'Other -s options include:
      name   - full name
      last   - surname
      first  - given name
      init   - initials
      room   - room number
      work   - work phone number
      home   - home phone number
      mobile - mobile phone number
      fax    - fax number
      url    - URL
      email  - email address
      title  - title
      '
      exit
    end

    # Get or generate the password.
    set :pass, self[:pass] || genpass

    # Create the system user and set the password.
    sudo "useradd -m #{ user } -s /bin/bash"
    sudo "chfn -f '#{ self[:name] }' -r '#{ self[:room] }' -w '#{ self[:work] }' -h '#{ self[:home] }' #{ user }"
    chpass( user, pass )

    # Determine the new usergroup and ID.
    uid = nil
    gid = nil
    run( "id -u #{ user }" ) { |ch, st, data| uid = data.strip }
    run( "id -g #{ user }" ) { |ch, st, data| gid = data.strip }

    # Create the LDIF for the user and add it.
    put user_ldif( user, pass, uid, gid ), '/tmp/user.ldif'
    run_ldap "ldapadd -U #{ ENV['USER'] } -ZZ -Y DIGEST-MD5 -f /tmp/user.ldif"

    # We're outta here.
    run 'rm /tmp/user.ldif'
    logger.info( "User “#{ user }” created with password “#{ pass }”")
  end

  task :deluser, :roles => :mail do
    unless user = self[:uname]
      puts 'You must specify a username via the "-s uname=foo" option'
      exit
    end
    exit unless Capistrano::CLI.ui.agree("Are you sure you want to delete #{ user }? ")
    sudo "userdel #{ user }"
    sudo "rm -rf /home/#{ user }"
    run_ldap "ldapdelete -U #{ ENV['USER'] } -ZZ -Y DIGEST-MD5 uid=#{ user },ou=people,dc=kineticode,dc=com"
  end

  task :passwd, :roles => :mail do
    unless user = self[:uname]
      puts 'You must specify a username via the "-s uname=foo" option'
      exit
    end

    Capistrano::CLI.ui.agree("Are you sure you want to reset the password for #{ user }? ")

    pass = self[:pass] || genpass
    chpass( user, pass )
    run_ldap "ldappasswd -U #{ ENV['USER'] } -ZZ -Y DIGEST-MD5 -s '#{ pass }' uid=#{ user },ou=people,dc=kineticode,dc=com"
    logger.info( "Password for “#{ user }” changed to “#{ pass }”")
  end

end

namespace :build do

  desc 'Installs the base packages that I needs, and upgrades all existing packages.'
  namespace :ubuntu do
    task :default, :roles => :mail do
      upload 'config/sources.list', '/etc/apt/sources.list'
      upgrade
      sudo 'env DEBIAN_FRONTEND=noninteractive apt-get -y install emacs screen sysstat make gcc libc6-dev path'
    end

    desc 'Upgrade all installed packages.'
    task :upgrade, :roles => :mail do
      sudo 'env DEBIAN_FRONTEND=noninteractive apt-get -y update'
      sudo 'env DEBIAN_FRONTEND=noninteractive apt-get -y upgrade'
    end
  end

  desc 'Builds a wildcard SSL certificate for kineticode.com using bin/sslcert.sh and config/openssl.cnf.'
  namespace :cert do
    task :default, :roles => :mail do
      sudo 'env DEBIAN_FRONTEND=noninteractive apt-get -y update'
      sudo 'env DEBIAN_FRONTEND=noninteractive apt-get -y install openssl'
      sudo_script 'bin/sslcert.sh'
    end
  end

  namespace :bind do
    task :default, :roles => :dns do
      sudo 'env DEBIAN_FRONTEND=noninteractive apt-get -y update'
      sudo 'env DEBIAN_FRONTEND=noninteractive apt-get -y install bind9'
      config
    end

    task :config, :roles => :dns do
      upload 'config/named.conf.options', '/etc/bind/named.conf.options', :owner => 'root', :group => 'bind', :mode => 0644
      upload 'config/resolv.conf', '/etc/resolv.conf', :mode => 0644
      sudo '/etc/init.d/bind9 restart'
    end
  end

  namespace :ldap do
    desc 'Install and configure OpenLDAP with Kineticode’s directory.'
    # change password:
    # ldappasswd -U david -S -W -ZZ "uid=julie,ou=people,dc=kineticode,dc=com"
    # do a search for people with a few of their attributes:
    # ldapsearch -U david -ZZ (objectClass=inetOrgPerson) dn uid mail uidNumber gidNumber
    # Add stuff to the directory.
    # ldapadd -U david -ZZ -f add.ldif

    task :default, :roles => :ldap do
      sudo 'env DEBIAN_FRONTEND=noninteractive apt-get -y update'
      sudo 'env DEBIAN_FRONTEND=noninteractive apt-get -y install slapd ldap-utils libsasl2-modules-ldap libldap2-dev'
      sudo '/etc/init.d/slapd stop'
      sudo 'rm -rf /var/lib/ldap'
      sudo 'mkdir /var/lib/ldap'
      sudo 'chown openldap:openldap /var/lib/ldap'
      # Add the openldap user to the ssl-cert group.
      sudo 'gpasswd -a openldap ssl-cert'
      config_files
      upload '../Corporate/config/kineticode.ldif', '/tmp/kineticode.ldif'
      sudo 'slapadd -v -l /tmp/kineticode.ldif'
      sudo 'chown -R openldap:openldap /var/lib/ldap'
      sudo 'rm /tmp/kineticode.ldif'
      sudo '/etc/init.d/slapd start'
    end

    task :config, :roles => :ldap do
      config_files
      sudo '/etc/init.d/slapd restart'
    end

    task :config_files, :roles => :ldap do
      upload 'config/openldap/slapd', '/etc/default/slapd', :mode => 0644
      upload 'config/openldap/slapd.conf', '/etc/ldap/slapd.conf', :mode => 0640, :group => 'openldap'
      upload 'config/openldap/ldap.conf', '/etc/ldap/ldap.conf', :mode => 0644
      upload 'config/openldap/DB_CONFIG', '/var/lib/ldap/DB_CONFIG', :mode => 0644
      upload 'config/cron.daily/backupldap', '/etc/cron.daily/backupldap', :mode => 0755
    end

  end

  namespace :sasl do
    task :default, :roles => :mail do
      sudo 'env DEBIAN_FRONTEND=noninteractive apt-get -y update'
      sudo 'env DEBIAN_FRONTEND=noninteractive apt-get -y install libsasl2-2 libsasl2-modules sasl2-bin libsasl2-modules-ldap'

      # Create sasldb by creating a test user, but not really creating it.
      sudo 'echo "foo" | sudo /usr/sbin/saslpasswd2 -c -n -p  test'
      sudo 'chown root:sasl /etc/sasldb2'
      config
    end

    task :config, :roles => :mail do
      upload 'config/sasl/saslauthd', '/etc/default/saslauthd', :mode => 0644
      upload 'config/sasl/saslauthd.conf', '/etc/saslauthd.conf', :mode => 0644
      sudo '/etc/init.d/saslauthd restart'
    end
  end

  namespace :authdaemon do
    task :default, :roles => :mail do
      sudo 'env DEBIAN_FRONTEND=noninteractive apt-get -y update'
      sudo 'env DEBIAN_FRONTEND=noninteractive apt-get -y install courier-authlib courier-authdaemon'
      config
    end

    task :config, :roles => :mail do
      upload 'config/courier/authdaemonrc', '/etc/courier/authdaemonrc', :owner => 'daemon', :group => 'daemon', :mode => 0660
      upload 'config/courier/authldaprc', '/etc/courier/authldaprc', :owner => 'daemon', :group => 'daemon', :mode => 0660
      pass = Capistrano::CLI.password_prompt('Password for uid=mail,ou=daemons,dc=kineticode,dc=com: ')
      sudo %{perl -i -pe 's/-PASSWORD-/#{pass}/' /etc/courier/authldaprc}
      sudo '/etc/init.d/courier-authdaemon restart'
    end
  end
  
  namespace :postfix do
    task :default, :roles => :mail do
      build::sasl::default
      build::authdaemon::default
      # swaks is a nice tool for testing SMTP.
      # postgrey, grefix (no package), policyd,
      sudo 'env DEBIAN_FRONTEND=noninteractive apt-get -y install maildrop postfix postfix-pcre swaks postgrey postfix-policyd-spf-perl postfix-ldap'
      # Add the postfix user to the sasl group so it can authenticate users.
      sudo 'gpasswd -a postfix sasl'
      # Add the mail user to the daemon group so that it can connect to authdaemond.
      sudo 'gpasswd -a mail daemon'
      # Make sure that maildrop is suid for root.
      sudo 'chmod u+s /usr/bin/maildrop'
      config
    end
    
    task :config, :roles => :mail do
      %w[ master main mailbox_maps header_checks body_checks recipient_checks helo_checks sender_checks client_checks ].each do |f|
        upload "config/postfix/#{f}.cf", "/etc/postfix/#{f}.cf", :mode => 0644
      end

      upload '../Corporate/config/alias_maps.cf', '/etc/postfix/alias_maps.cf', :mode => 0644
      upload '../Corporate/config/aliases', '/etc/aliases', :mode => 0644
      upload 'config/postgrey.conf', '/etc/default/postgrey', :mode => 0644
      upload 'config/maildroprc', '/etc/maildroprc', :mode => 0644
      upload 'config/sasl_postfix.conf', '/etc/postfix/sasl/smtpd.conf', :mode => 0644

      %w[ mailbox_maps helo_checks sender_checks client_checks ]. each do |f|
        sudo "postmap /etc/postfix/#{f}.cf"
      end

      sudo 'newaliases'
      sudo 'postfix reload'
      sudo '/etc/init.d/saslauthd restart'
    end
  end

  namespace :imap do
    task :default, :roles => :mail do
      build::authdaemon::default
      sudo 'env DEBIAN_FRONTEND=noninteractive apt-get -y update'
      sudo 'env DEBIAN_FRONTEND=noninteractive apt-get -y install fam courier-imap courier-imap-ssl courier-authlib-ldap'
      sudo 'rm -rf /etc/courier/imapd.pem /etc/courier/imapd.cnf'
      sudo 'maildirmake /etc/skel/Maildir'
      config
    end

    task :config, :roles => :mail do
      upload 'config/courier/imapd', '/etc/courier/imapd', :mod => 0644
      upload 'config/courier/imapd-ssl', '/etc/courier/imapd-ssl', :mod => 0644
      upload 'config/courier/portmap', '/etc/default/portmap', :mod => 0644
      sudo '/etc/init.d/portmap restart'
      sudo '/etc/init.d/fam restart'
      sudo '/etc/init.d/courier-imap restart'
      sudo '/etc/init.d/courier-imap-ssl restart'
    end
  end

  namespace :offlineimap do
    task :default, :roles => :backup do
      sudo 'env DEBIAN_FRONTEND=noninteractive apt-get -y install offlineimap'
      # sudo_script 'bin/offlineimap.sh'
      config
    end

    task :config, :roles => :backup do
      upload 'config/offlineimap.conf', '/root/.offlineimaprc'
      %w[david julie anna].each { |who|
        sudo "mkdir -p /data/backup/imap/#{ who }"
      }
    end
  end

  namespace :svn do
    task :default, :roles => :web do
      build::perl
      build::apache2
      build::xml
      sudo 'env DEBIAN_FRONTEND=noninteractive apt-get -y install ruby ruby1.8-dev python python2.5-dev swig libtool'
      sudo_script 'bin/subversion.sh'
      sudo '/usr/local/bin/svnadmin create /var/svn'
      sudo 'chmod -R go-rwx /var/svn'
      sudo 'chmod go+rx /var/svn'
      sudo 'chown -R nobody:nogroup /var/svn/format /var/svn/db /var/svn/dav /var/svn/hooks'
      config
    end

    task :config, :roles => :web do
      upload 'config/cron.daily/backupsvn', '/etc/cron.daily/backupsvn', :mode => 0755
      upload 'config/post-commit', '/var/svn/hooks/post-commit', :mode => 0755
      sudo %q{bash -c "if [ -f /usr/local/apache2/modules/mod_dav_svn.so ]; then perl -i -pe 's/^#\\s+(LoadModule\\s+(?:dav|authz)_svn)/\\$1/gm' /etc/httpd/httpd.conf; fi"}
      sudo '/usr/bin/apachectl restart'
    end

  end

  task :perl, :roles => :web do
    sudo 'env DEBIAN_FRONTEND=noninteractive apt-get -y update'
    sudo 'env DEBIAN_FRONTEND=noninteractive apt-get -y install libdb4.6 libdb4.6-dev'
    sudo_script 'bin/perl.sh'
  end

  task :uuid, :roles => :web do
    perl
    sudo_script 'bin/uuid.sh'
  end

  namespace :apache2 do
    task :default, :roles => :web do
      sudo 'env DEBIAN_FRONTEND=noninteractive apt-get -y install zlib1g zlib1g-dev libssl-dev cronolog libldap2-dev'
      build::cert
      sudo_script 'bin/apache2.sh'
      config
    end

    task :config, :roles => :web do
      sudo 'mkdir -p /etc/httpd'
      sudo 'mkdir -p /var/www/kineticode.com'
      sudo 'mkdir -p /var/www/strongrrl.com'
      sudo 'mkdir -p /var/www/back.openjsan.org'
      sudo 'mkdir -p /var/log/httpd'
      sudo 'mkdir -p /var/lock/httpd'
      upload 'config/httpd/httpd.conf', '/etc/httpd/httpd.conf', :mode => 0644
      sudo 'rm /usr/local/apache2/conf/httpd.conf'
      sudo 'ln -s /etc/httpd/httpd.conf /usr/local/apache2/conf/httpd.conf'
      upload 'config/httpd/httpd-vhosts.conf', '/etc/httpd/httpd-vhosts.conf', :mode => 0644
      upload 'config/httpd/httpd-ssl.conf', '/etc/httpd/httpd-ssl.conf', :mode => 0644
      upload 'config/httpd/apachectl', '/usr/bin/apachectl', :mode => 0755
      upload 'config/httpd/httpd', '/etc/init.d/httpd', :mode => 0755
      upload 'config/cron.daily/clean_errorlogs', '/etc/cron.daily/clean_errorlogs', :mode => 0755
      upload 'config/cron.daily/syncjsan', '/etc/cron.daily/syncjsan', :mode => 0755
      sudo 'update-rc.d httpd defaults'

      sudo %q{bash -c "if [ -f /usr/local/apache2/modules/mod_perl.so ]; then perl -i -pe 's/^#\\s+(LoadModule\\s+perl_module)/\\$1/m' /etc/httpd/httpd.conf; fi"}
      sudo %q{bash -c "if [ -f /usr/local/apache2/modules/mod_apreq2.so ]; then perl -i -pe 's/^#\\s+(LoadModule\\s+apreq_module)/\\$1/m' /etc/httpd/httpd.conf; fi"}
      sudo %q{bash -c "if [ -f /usr/local/apache2/modules/mod_dav_svn.so ]; then perl -i -pe 's/^#\\s+(LoadModule\\s+(?:dav|authz)_svn)/\\$1/gm' /etc/httpd/httpd.conf; fi"}

      pass = Capistrano::CLI.password_prompt('Password for uid=nobody,ou=daemons,dc=kineticode,dc=com: ')
      sudo %{perl -i -pe 's/-PASSWORD-/#{pass}/g' /etc/httpd/httpd-vhosts.conf}
      sudo '/etc/init.d/httpd restart'
    end
  end

  task :modperl2, :roles => :web do
    perl
    apache2
    sudo_script 'bin/modperl2.sh'
    sudo_script 'bin/apreq2.sh'
    build::apache2::config
  end

  task :graphics, :roles => :web do
    sudo 'env DEBIAN_FRONTEND=noninteractive apt-get update'
    sudo 'env DEBIAN_FRONTEND=noninteractive apt-get -y install libjpeg62 libjpeg62-dev libpng3 libpng12-dev libtiff4 libtiff4-dev libgif4 libgif-dev'
  end

  task :xml, :roles => :web do
    sudo 'env DEBIAN_FRONTEND=noninteractive apt-get update'
    sudo 'env DEBIAN_FRONTEND=noninteractive apt-get -y install libxml2 libxml2-dev libxslt1-dev libexpat1 libexpat1-dev'
  end

  task :cpan, :roles => :web do
    graphics
    perl
    xml
    run_script 'bin/cpan.sh'
  end

  namespace :pg do
    task :default, :roles => :db do
      perl
      uuid
      sudo 'env DEBIAN_FRONTEND=noninteractive apt-get -y install bison flex libreadline5 libreadline5-dev comerr-dev libkrb5-dev libpam0g-dev'
      sudo_script 'bin/postgresql.sh'
    end

    task :config, :roles => :db do
      upload 'config/cron.daily/backuppostgres', '/etc/cron.daily/backuppostgres', :mode => 0755
    end
  end

  namespace :rt do
    task :default, :roles => :web do
      modperl2
      cpan
      pg
      sudo 'env DEBIAN_FRONTEND=noninteractive apt-get -y install libgd2-xpm libgd2-xpm-dev'
      sudo_script 'bin/rt.sh'
      sudo 'wget -O /usr/local/rt3/lib/RT/User_Local.pm http://www.justatheory.com/computers/programming/perl/rt/User_Local.pm.ldap'
      sudo 'chgrp bin /usr/local/rt3/lib/RT/User_Local.pm'
      config
    end

    task :config, :roles => :web do
      upload '../Corporate/config/RT_SiteConfig.pm', '/usr/local/rt3/etc/RT_SiteConfig.pm',
             :group => 'rt3',
             :mode  => 0550
    end
  end

  namespace :rsync do
    task :default, :roles => :mail do
      sudo 'useradd -m rsync -s /bin/bash'
      sudo 'mkdir -p /home/rsync/.ssh'
      sudo 'chown rsync:rsync /home/rsync/.ssh'
      config
      puts %{Be sure to run\n\n    EDITOR=emacs visudo\n\n to add\n\n    rsync ALL=NOPASSWD: /usr/bin/rsync"\n\n}
    end

    task :config, :roles => :mail do
      upload 'config/rsnapshot/authorized_keys', '/home/rsync/.ssh/authorized_keys', :mode => 0600, :owner => 'rsync', :group => 'rsync'
      sudo 'mkdir -p /usr/local/bin'
      upload 'config/rsnapshot/validate_rsync', '/usr/local/bin/validate_rsync', :mode => 0755
      upload 'config/rsnapshot/sudo_rsync', '/usr/local/bin/sudo_rsync', :mode => 0755
    end
  end

  namespace :stats do
    task :default, :roles => :web do
      sudo 'env DEBIAN_FRONTEND=noninteractive apt-get -y update'
      sudo 'env DEBIAN_FRONTEND=noninteractive apt-get -y install awstats'
      config
    end

    task :config, :roles => :web do
      sudo 'mkdir -p /var/www/stats.kineticode.com'
      sudo 'mkdir -p /var/www/stats.strongrrl.com'
      upload 'config/awstats/awstats.kineticode.conf', '/etc/awstats/awstats.kineticode.conf', :mode => 0644
    end
  end

end

namespace :my do
  namespace :build do
    task :default, :roles => :local do
      xml
      graphics
    end

    task :gems, :roles => :local do
      sudol( 'gem install rubygems-update' )
      sudol( 'gem install capistrano' )
    end

    task :xml, :roles => :local do
      sudol_scripts( 'expat', 'libxml2', 'libxslt' )
    end

    task :graphics, :roles => :local do
      sudol_scripts( 'libpng', 'libjpeg', 'libtiff', 'giflib' )
    end

    task :uuid, :roles => :local do
      perl
      sudol_scripts( 'uuid' )
    end

    task :emacs, :roles => :local do
      graphics
      sudol_scripts( 'aspell', 'emacs' 'elisp' )
    end

    task :perl, :roles => :local do
      sudol_scripts( 'perl' )
    end

    task :cpan, :roles => :local do
      graphics
      perl
      xml
      runl "#{ BASE }/bin/cpan.sh"
    end

    task :pg, :roles => :local do
      perl
      uuid
      sudol_scripts( 'postgresql' )
    end

    task :apache, :roles => :local do
      sudol_scripts( 'mm', 'apache' )
    end

    task :modperl, :roles => :local do
      perl
      apache
      runl( %w[cpan Apache::Test] )
      sudol_scripts( 'modperl', 'apreq' )
    end

    task :modgzip, :roles => :local do
      apache
      sudol_scripts( 'modgzip' )
    end

    task :apache2, :roles => :local do
      sudol_scripts 'apache2'
    end

    task :modperl2, :roles => :local do
      perl
      apache2
      runl( %w[cpan ExtUtils::XSBuilder] )
      sudol_scripts 'modperl2', 'apreq2'
    end

    task :cert, :roles => :local do
      sudol_scripts  'sslcert'
    end

    task :pg_top, :roles => :local do
      sudol_scripts( 'pg_top' )
    end

  end
end
