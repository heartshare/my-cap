load 'lib/util.rb'

role :backup, 'theory.kineticode.com'
role :dns,    'crocker.kineticode.com'
role :svn,    'svn.kineticode.com'
role :local,  'localhost'
role :ldap,   'ldap.kineticode.com'
role :mail,   'smtp.kineticode.com'
# role :mail,   '192.168.1.15' # wolf.kineticode.com

namespace :apt do
  task :update do
    sudo 'apt-get update'
  end
end

namespace :build do

  desc 'Installs the base packages that I needs, and upgrades all existing packages.'
  namespace :ubuntu do
    task :default, :roles => :mail do
      upgrade
      sudo 'apt-get -y install emacs screen sysstat'
    end

    desc 'Upgrade all installed packages.'
    task :upgrade, :roles => :mail do
      sudo 'apt-get -y update'
      sudo 'apt-get -y upgrade'
    end
  end

  desc 'Builds a wildcard SSL certificate for kineticode.com using bin/sslcert.sh and config/openssl.cnf.'
  namespace :cert do
    task :default, :roles => :mail do
      sudo 'apt-get -y update'
      sudo 'apt-get -y install openssl'
      sudo_script 'bin/sslcert.sh'
    end
  end

  namespace :bind do
    task :default, :roles => :dns do
      sudo 'apt-get -y update'
      sudo 'apt-get -y install bind9'
      config
    end

    task :config, :roles => :dns do
      upload 'config/named.conf.options', '/etc/bind/named.conf.options', :owner => 'root', :group => 'bind', :mode => 0644
      upload 'config/resolv.conf', '/etc/resolv.conf', :mode => 0644
      sudo '/etc/init.d/bind9 restart'
    end
  end

  namespace :ldap do
    desc 'Install and configure OpenLDAP with Kineticodeâ€™s directory.'
    # change password:
    # ldappasswd -U david -S -W -ZZ "uid=julie,ou=people,dc=kineticode,dc=com"
    # do a search for people with a few of their attributes:
    # ldapsearch -U david -ZZ (objectClass=inetOrgPerson) dn uid mail uidNumber gidNumber
    # Add stuff to the directory.
    # ldapadd -U david -ZZ -f add.ldif

    task :default, :roles => :ldap do
      sudo 'apt-get -y update'
      sudo 'env DEBIAN_FRONTEND=noninteractive apt-get -y install slapd ldap-utils libsasl2-modules-ldap'
      sudo '/etc/init.d/slapd stop'
      sudo 'rm -rf /var/lib/ldap'
      sudo 'mkdir /var/lib/ldap'
      sudo 'chown openldap:openldap /var/lib/ldap'
      # Add the openldap user to the ssl-cert group.
      sudo 'gpasswd -a openldap ssl-cert'
      config_files
      upload '../Corporate/config/kineticode.ldif', '/tmp/kineticode.ldif'
      sudo 'slapadd -v -l /tmp/kineticode.ldif'
      sudo 'chown -R openldap:openldap /var/lib/ldap'
      sudo 'rm /tmp/kineticode.ldif'
      sudo '/etc/init.d/slapd start'
    end

    task :config, :roles => :ldap do
      config_files
      sudo '/etc/init.d/slapd restart'
    end

    task :config_files, :roles => :ldap do
      upload 'config/openldap/slapd', '/etc/default/slapd', :mode => 0644
      upload 'config/openldap/slapd.conf', '/etc/ldap/slapd.conf', :mode => 0600
      upload 'config/openldap/ldap.conf', '/etc/ldap/ldap.conf', :mode => 0644
      upload 'config/openldap/DB_CONFIG', '/var/lib/ldap/DB_CONFIG', :mode => 0644
    end

  end

  namespace :sasl do
    task :default, :roles => :mail do
      sudo 'apt-get -y update'
      sudo 'apt-get -y install libsasl2-2 libsasl2-modules sasl2-bin libsasl2-modules-ldap'

      # Create sasldb by creating a test user, but not really creating it.
      sudo 'echo "foo" | sudo /usr/sbin/saslpasswd2 -c -n -p  test'
      sudo 'chown root:sasl /etc/sasldb2'
      config
    end

    task :config, :roles => :mail do
      upload 'config/sasl/saslauthd', '/etc/default/saslauthd', :mode => 0644
      upload 'config/sasl/saslauthd.conf', '/etc/saslauthd.conf', :mode => 0644
      sudo '/etc/init.d/saslauthd restart'
    end
  end

  namespace :authdaemon do
    task :default, :roles => :mail do
      sudo 'apt-get -y update'
      sudo 'apt-get -y install courier-authlib courier-authdaemon'
      config
    end

    task :config, :roles => :mail do
      upload 'config/courier/authdaemonrc', '/etc/courier/authdaemonrc', :owner => 'daemon', :group => 'daemon', :mode => 0660
      upload 'config/courier/authldaprc', '/etc/courier/authldaprc', :owner => 'daemon', :group => 'daemon', :mode => 0660
      pass = Capistrano::CLI.password_prompt('Password for uid=mail,ou=daemons,dc=kineticode,dc=com: ')
      sudo %{perl -i -pe 's/-PASSWORD-/#{pass}/' /etc/courier/authldaprc}
      sudo '/etc/init.d/courier-authdaemon restart'
    end
  end
  
  namespace :postfix do
    task :default, :roles => :mail do
      build::sasl::default
      build::authdaemon::default
      # swaks is a nice tool for testing SMTP.
      # postgrey, grefix (no package), policyd,
      sudo 'env DEBIAN_FRONTEND=noninteractive apt-get -y install maildrop postfix postfix-pcre swaks postgrey postfix-policyd-spf-perl postfix-ldap'
      # Add the postfix user to the sasl group so it can authenticate users.
      sudo 'gpasswd -a postfix sasl'
      # Add the mail user to the daemon group so that it can connect to authdaemond.
      sudo 'gpasswd -a mail daemon'
      # Make sure that maildrop is suid for root.
      sudo 'chmod u+s /usr/bin/maildrop'
      config
    end
    
    task :config, :roles => :mail do
      %w[ master main mailbox_maps header_checks body_checks recipient_checks helo_checks sender_checks client_checks ].each do |f|
        upload "config/postfix/#{f}.cf", "/etc/postfix/#{f}.cf", :mode => 0644
      end

      upload '../Corporate/config/alias_maps.cf', '/etc/postfix/alias_maps.cf', :mode => 0644
      upload '../Corporate/config/aliases', '/etc/aliases', :mode => 0644
      upload 'config/postgrey.conf', '/etc/default/postgrey', :mode => 0644
      upload 'config/maildroprc', '/etc/maildroprc', :mode => 0644
      upload 'config/sasl_postfix.conf', '/etc/postfix/sasl/smtpd.conf', :mode => 0644

      %w[ mailbox_maps helo_checks sender_checks client_checks ]. each do |f|
        sudo "postmap /etc/postfix/#{f}.cf"
      end

      sudo 'newaliases'
      sudo 'postfix reload'
      sudo '/etc/init.d/saslauthd restart'
    end
  end

  namespace :imap do
    task :default, :roles => :mail do
      build::authdaemon::default
      sudo 'apt-get -y update'
      sudo 'env DEBIAN_FRONTEND=noninteractive apt-get -y install fam courier-imap courier-authlib-ldap'
      sudo 'rm -rf /etc/courier/imapd.pem /etc/courier/imapd.cnf'
      config
    end

    task :config, :roles => :mail do
      upload 'config/courier/imapd', '/etc/courier/imapd', :mod => 0644
      upload 'config/courier/portmap', '/etc/default/portmap', :mod => 0644
      sudo '/etc/init.d/portmap restart'
      sudo '/etc/init.d/fam restart'
      sudo '/etc/init.d/courier-imap restart'
    end
  end

  namespace :offlineimap do
    task :default, :roles => :backup do
      sudo 'apt-get -y install offlineimap'
      # sudo_script 'bin/offlineimap.sh'
      config
    end

    task :config, :roles => :backup do
      upload 'config/offlineimap.conf', '/root/.offlineimaprc'
      %w[david julie anna].each { |who|
        sudo "mkdir -p /data/backup/imap/#{ who }"
      }
    end

  end

  namespace :svn do
    task :default, :roles => :svn do
      sudo_script 'bin/subversion.sh'
    end
  end

end

namespace :my do
  namespace :build do
    task :default, :roles => :local do
      xml
      graphics
    end

    task :gems, :roles => :local do
      sudol( 'gem install rubygems-update' )
      sudol( 'gem install capistrano' )
    end

    task :xml, :roles => :local do
      sudol_scripts( 'expat', 'libxml2', 'libxslt' )
    end

    task :graphics, :roles => :local do
      sudol_scripts( 'libpng', 'libjpeg', 'libtiff', 'giflib' )
    end

    task :uuid, :roles => :local do
      perl
      sudol_scripts( 'uuid' )
    end

    task :emacs, :roles => :local do
      graphics
      sudol_scripts( 'aspell', 'emacs' 'elisp' )
    end

    task :perl, :roles => :local do
      sudol_scripts( 'perl' )
    end

    task :cpan, :roles => :local do
      graphics
      perl
      xml
      runl "#{ BASE }/bin/cpan.sh"
    end

    task :pg, :roles => :local do
      perl
      uuid
      sudol_scripts( 'postgresql' )
    end

    task :apache, :roles => :local do
      sudol_scripts( 'mm', 'apache' )
    end

    task :modperl, :roles => :local do
      perl
      apache
      sudol_scripts( 'modperl', 'apreq' )
    end

    task :modgzip, :roles => :local do
      apache
      sudol_scripts( 'modgzip' )
    end

  end
end
